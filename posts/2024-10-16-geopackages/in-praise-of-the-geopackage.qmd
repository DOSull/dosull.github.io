---
title: "In praise of GeoPackages"
subtitle: "Shapefiles... who needs 'em?"
description: "One of the mysteries of the geospatial universe is the persistence of the shapefile. My thoughts, with example R code, on why we should all be using GeoPackages instead."
author: "David O'Sullivan"
toc: true
lightbox:
  match: auto
  loop: true
categories:
  - geospatial
  - R
  - qgis
  - tutorial
execute: 
  cache: true
  freeze: auto
knitr:
  opts_chunk: 
    warning: false
    message: false
date: 10-16-2024
date-modified: 11-16-2024
---

In the [shapefiles must die](http://switchfromshapefile.org/) wars I've been smugly using [GeoPackages](https://www.geopackage.org/) for several years now. Here are some reasons why.

## One file: no really, it's just one file!
If there is one thing above all others to love about GeoPackages it's this. When teaching newcomers, the standout advantage over shapefiles is simple: there is _only one file_, and not some number between three and seven (or is it eight? I'm just not sure). 

I've lost count of how often I had to disable the increasingly hard to find [Hide file extensions]{style="font-family:sans-serif;"} option on a baffled student's computer to reveal the disturbing truth that there were several identical-except-for-the-extension files that _together_ formed a so-called shapefile. Or how when supplying data for lab assignments I had to include instructions about unzipping files to a known folder and so on (a seemingly simple requirement made much more complicated by more recent releases of Windows allowing the user to look inside a `.zip` file without actually unpacking the contents...).

## Understandable `ATTRIBUTE_`
What I meant to say was: understandable `attribute_names` because you can have attribute names longer than 10 characters.

## Many layers
I've tended to shy away from packaging multiple datasets in GeoPackages as support for this feature has at times been uncertain and confusing. 

Now that I am less beholden to not confusing beginners where 'one file = one layer' is a useful rule to live by, I've started to look more closely at what's going on here. It still has the potential to confuse &mdash; especially in QGIS's right-click [**Export &rarr; Save Features As...**]{style="font-family:sans-serif;"} &mdash; but there is untapped potential here for making life easier when it comes to sharing bundles of related data with a minimum of fuss.

I'll explain using my go to tool for general data wrangling, R's [`sf` package](https://r-spatial.github.io/sf/).

### Multi-layer geopackages in R
Assuming you have a locally stored simple GeoPackage `nz.gpkg`, you read it using:

```{r}
library(sf)
nz <- st_read("nz.gpkg")
```

Now, if you'd like to add another dataset to that file, you can specify a _layer_ to put it in. Before doing that, it's probably best to check what layers are already there using `st_layers()`:

```{r}
st_layers("nz.gpkg")
```

As we might expect (and if you'll excuse the awkward formatting due to the long `crs_name`) a single layer with the same layer name as the file itself. Say we buffer our data and want to store it back into the same file, then we can do the below, as long as we provide a new layer name to store it in:

```{r}
nz |> 
  st_buffer(12000) |> 
  st_write("nz.gpkg", layer = "coast")
```

And now we can see that both layers are present in the file:

```{r}
st_layers("nz.gpkg")
```

Now if you open this file in R unless you specify the layer you want, you'll just get the first one:

```{r}
#| message: true
#| warning: true
st_read("nz.gpkg")
```

and one of those warning messages it's tempting not to read, but really should.

And that's it really, for multiple _vector_ layers in GeoPackages in R.

### Multi-layer geopackages in QGIS
Meanwhile, if you open a two-layer GPKG in QGIS you'll see this:

![](opening-a-multilayer-gpkg-dialog.png){fig-align="center" style="width:600px; border-radius:10px; box-shadow: 5px 5px 5px #aaa;"}

That's pretty clear. What's unfortunately less clear than in R is the sequence of operations that will safely add a layer to an existing GeoPackage. That's not quite fair: what is unclear is the warning message you get if you choose an existing `.gpkg` file as the destination for a dataset you'd like to save. The warning message looks like this:

![](gpkg-already-exists-warning.png){fig-align="center" style="width:300px; border-radius:10px; box-shadow: 5px 5px 5px #aaa;"}

This seems pretty scary. Before trying this at home I suggest you make a copy of the target geopackage if you are worried about losing your data, but if you steel yourself, and against every instinct hit [Replace]{style="font-family:sans-serif; color:#f00;"}, then as long as you set a different name in the [Layer name]{style="font-family:sans-serif;"} option of the [**Save Vector Layer as...**]{style="font-family:sans-serif;"} dialog

![](new-layer-name.png){fig-align="center" style="width:450px; border-radius:12px 0px 0px; box-shadow: 5px 5px 5px #aaa;"}

it will be fine, and you'll end up with an additional layer in the target GeoPackage.

You can also manage the component layers of GeoPackages in QGIS's [**Browser**]{style="font-family:sans-serif;"} panel.

### Other platforms are available
I should note that similar to R, the Python [`geopandas`](https://geopandas.org/en/stable/index.html) module through its [`read_file()`](https://geopandas.org/en/stable/docs/reference/api/geopandas.read_file.html) and [`list_layers()`](https://geopandas.org/en/stable/docs/reference/api/geopandas.list_layers.html#geopandas.list_layers) functions, and its GeoDataframe's [`to_file()`](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.to_file.html) method offers the same functionality as discussed above.

## Many formats
So if you can put many different layers in a GeoPackage, can you mix vector and raster datasets in there too?

Turns out you can, although, at least for R's `sf` this is where things get a bit messy. `terra` is the package for dealing with raster data, so let's load that and read in a raster dataset. Before doing that, I'll clean up `nz.gpkg` so it only has one layer again:

```{r}
nz |> st_write("nz.gpkg", layer = "vector", delete_dsn = TRUE)
```

Now load the raster layer

```{r}
library(terra)
nz_r <- rast("nz.tif")
nz_r
```

Crowbarring this thing into our GeoPackage is certainly possible, but it's far from intuitive, and involves invoking some GDAL options.

```{r}
nz_r |> 
  writeRaster("nz.gpkg", 
              gdal = c("RASTER_TABLE=raster", "APPEND_SUBDATASET=YES"))
```

The [GDAL options are all documented](https://gdal.org/en/latest/drivers/raster/gpkg.html), but applying them using `terra::writeRaster` is finicky, and clearly this is not for the faint-hearted!

Furthermore... `sf` can't 'see' the raster layer:

```{r}
st_layers("nz.gpkg")
```

I guess if you don't 'do' raster layers then there is no point in being able to see them either ¯&#92;&#95;(ツ)&#95;/¯. `terra` is similarly see-no-evil about things and just reads in the raster layer that is in the file without commenting on other layers that might be present:

```{r}
rast("nz.gpkg")
```

QGIS actually does better here. It certainly sees both layers:

![](opening-a-multilayer-gpkg-dialog-2.png){fig-align="center" style="width:600px; border-radius:10px; box-shadow: 5px 5px 5px #aaa;"}

It's worth noting that the QGIS [**Browser**]{style="font-family:sans-serif;"} panel makes mixing raster and vector layers into your GeoPackages straightforward.

![](qgis-raster-vector-nz.png){.lightbox}

Overall, I've been aware that I can bundle raster and vector layers in GeoPackages like this but haven't used the capability. In part because I've only just figured out how to do it using the R tools(!), but mostly because I prefer to keep raster data in GeoTIFFs and vector data in GeoPackages so I can tell which is which at a glance.

## So, are GeoPackages perfect?
Of course not. There's an argument to be made that every format that perpetuates the simple features paradigm is a bad as every other. I even wrote [a book](https://computinggeographically.org) that is &mdash; kind of &mdash; all about this. It's one of the mysteries of the evolution of geospatial that topology was embedded in the 'standard' formats, until it wasn't. For what it's worth, I think we have relational databases to blame for that.

GeoPackages don't get us out of [floating point geometry hell](../2021-12-08-low-level-handling-sf-objects/low-level-sf-objects.qmd) either.

There are also better formats for particular applications. [GeoJSON](https://geojson.org/) is web-native in a way that GeoPackages never will be, and newer formats such as [FlatGeoBuf](https://flatgeobuf.org/) and [GeoParquet](https://geoparquet.org/), and more recent approaches like [Discrete Global Grids](https://en.wikipedia.org/wiki/Discrete_global_grid) certainly have their place.

But in a world still dominated by relational DBMS, a geospatial format that is basically a wrapper around SQLite tables was almost certain to emerge eventually, and GeoPackages are that format. They're vastly preferable to shapefiles, and it's good to see them slowly (more quickly would be better) replacing them.

The shapefile is (almost) dead, long live the GeoPackage!

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false
nz |> st_write("nz.gpkg", delete_dsn = TRUE)
```